/****************************************************************
 *
 * Module: UART
 *
 * File Name: uart.h
 *
 * Description: Header File for AVR uart driver
 *
 * Author: Sarah
 ******************************************************************/

#include "uart.h"
#include "avr/io.h" /* To use the UART Registers */
#include "common_macros.h"

/*******************************************************************************
 *                      Functions definitions                                   *
 *******************************************************************************/
/*
 * Description :
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const uart_ConfigType *Config_Ptr){

#ifdef ASYNCHRONOUS_DOUBLE_SPEED_MODE

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);

#endif

	/************************** UCSRB Description **************************
	 * RXCIE Disable/Enable USART RX Complete Interrupt Enable
	 * TXCIE Disable/Enable USART Tx Complete Interrupt Enable
	 * UDRIE Disable/Enable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/

#if (UART_TRANSMIT_IMPLEMENTATION_BASED == UART_POOLLING_BASED)

	CLEAR_BIT(UCSRB,TXCIE);
	CLEAR_BIT(UCSRB,UDRIE);


#elif (UART_TRANSMIT_IMPLEMENTATION_BASED == UART_INTERRUPT_BASED)

	SET_BIT(UCSRB,TXCIE);
	SET_BIT(UCSRB,UDRIE);

#endif

#if (UART_RECEIVE_IMPLEMENTATION_BASED == UART_POOLLING_BASED)

	CLEAR_BIT(UCSRB,RXCIE);

#elif (UART_RECEIVE_IMPLEMENTATION_BASED == UART_INTERRUPT_BASED)

	SET_BIT(UCSRB,RXCIE);

#endif

#if (UART_RECEIVE_IMPLEMENTATION_BASED == UART_POOLLING_BASED)

	CLEAR_BIT(UCSRB,RXCIE);


#elif (UART_RECEIVE_IMPLEMENTATION_BASED == UART_INTERRUPT_BASED)

	SET_BIT(UCSRB,RXCIE);


#endif




	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
	UBRRL = ubrr_value;







	Config_Ptr->Baudrate
	Config_Ptr->clock
	Config_Ptr->num_of_data_bits
	Config_Ptr->stop_bits




}

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){





}
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){




}

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){




}

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */

void UART_receiveString(uint8 *Str){



}
