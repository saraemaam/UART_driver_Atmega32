
UART_driver_V02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  0000049e  2**0
                  ALLOC
  3 .stab         0000096c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ae0  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "uart.h"
#include<avr/io.h>


int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	6f 97       	sbiw	r28, 0x1f	; 31
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61

	uint8 Str[20];
	uint8 data;
	uart_ConfigType uart_configuration = { BAUD_RATE_9600,_8BIT_MODE,_1STOP_BIT,DISABLED};
  a6:	ce 01       	movw	r24, r28
  a8:	46 96       	adiw	r24, 0x16	; 22
  aa:	9c 8f       	std	Y+28, r25	; 0x1c
  ac:	8b 8f       	std	Y+27, r24	; 0x1b
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	fe 8f       	std	Y+30, r31	; 0x1e
  b4:	ed 8f       	std	Y+29, r30	; 0x1d
  b6:	f5 e0       	ldi	r31, 0x05	; 5
  b8:	ff 8f       	std	Y+31, r31	; 0x1f
  ba:	ed 8d       	ldd	r30, Y+29	; 0x1d
  bc:	fe 8d       	ldd	r31, Y+30	; 0x1e
  be:	00 80       	ld	r0, Z
  c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
  c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9e 8f       	std	Y+30, r25	; 0x1e
  c8:	8d 8f       	std	Y+29, r24	; 0x1d
  ca:	eb 8d       	ldd	r30, Y+27	; 0x1b
  cc:	fc 8d       	ldd	r31, Y+28	; 0x1c
  ce:	00 82       	st	Z, r0
  d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
  d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	9c 8f       	std	Y+28, r25	; 0x1c
  d8:	8b 8f       	std	Y+27, r24	; 0x1b
  da:	9f 8d       	ldd	r25, Y+31	; 0x1f
  dc:	91 50       	subi	r25, 0x01	; 1
  de:	9f 8f       	std	Y+31, r25	; 0x1f
  e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
  e2:	ee 23       	and	r30, r30
  e4:	51 f7       	brne	.-44     	; 0xba <main+0x28>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&uart_configuration);
  e6:	ce 01       	movw	r24, r28
  e8:	46 96       	adiw	r24, 0x16	; 22
  ea:	0e 94 a0 00 	call	0x140	; 0x140 <UART_init>

	/* Enable Global interrupt enable*/
	SREG|=(1<<7);
  ee:	af e5       	ldi	r26, 0x5F	; 95
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	ef e5       	ldi	r30, 0x5F	; 95
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8c 93       	st	X, r24

	while(1)
	{
		data = UART_recieveByte(); /* Receive Byte from Terminal */
  fc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_recieveByte>
 100:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(data);       /* Re-send the received byte to Terminal */
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	0e 94 52 01 	call	0x2a4	; 0x2a4 <UART_sendByte>
 108:	f9 cf       	rjmp	.-14     	; 0xfc <main+0x6a>

0000010a <__vector_13>:
/**************************************************************
 *                           ISR
 *************************************************************/

ISR (USART_RXC_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	g_UART_result = UDR;
 122:	ec e2       	ldi	r30, 0x2C	; 44
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 93 66 00 	sts	0x0066, r24

}
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const uart_ConfigType *Config_Ptr){
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	00 d0       	rcall	.+0      	; 0x146 <UART_init+0x6>
 146:	00 d0       	rcall	.+0      	; 0x148 <UART_init+0x8>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	9c 83       	std	Y+4, r25	; 0x04
 14e:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value =0;
 150:	1a 82       	std	Y+2, r1	; 0x02
 152:	19 82       	std	Y+1, r1	; 0x01

	/* Double Speed or Normal mode*/
#ifdef ASYNCHRONOUS_DOUBLE_SPEED_MODE
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 154:	eb e2       	ldi	r30, 0x2B	; 43
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
	 * UDRIE Disable/Enable USART Data Register Empty Interrupt Enable
	 ***********************************************************************/

#if (UART_TRANSMIT_IMPLEMENTATION_BASED == UART_POOLLING_BASED)

	CLEAR_BIT(UCSRB,TXCIE);
 15c:	aa e2       	ldi	r26, 0x2A	; 42
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	ea e2       	ldi	r30, 0x2A	; 42
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8f 7b       	andi	r24, 0xBF	; 191
 168:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UDRIE);
 16a:	aa e2       	ldi	r26, 0x2A	; 42
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	ea e2       	ldi	r30, 0x2A	; 42
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRB,RXCIE);

#elif (UART_RECEIVE_IMPLEMENTATION_BASED == UART_INTERRUPT_BASED)

	SET_BIT(UCSRB,RXCIE);
 178:	aa e2       	ldi	r26, 0x2A	; 42
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ea e2       	ldi	r30, 0x2A	; 42
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8c 93       	st	X, r24
	/*
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 */
	SET_BIT(UCSRB,RXEN);
 186:	aa e2       	ldi	r26, 0x2A	; 42
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	ea e2       	ldi	r30, 0x2A	; 42
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
 194:	aa e2       	ldi	r26, 0x2A	; 42
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	ea e2       	ldi	r30, 0x2A	; 42
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	8c 93       	st	X, r24

	/* UCSZ2 = 0 For 5,6,7,8-bit data mode in case of 9bit mode
	 * UCSZ2 = 1 */
	CLEAR_BIT(UCSRB,UCSZ2);
 1a2:	aa e2       	ldi	r26, 0x2A	; 42
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	ea e2       	ldi	r30, 0x2A	; 42
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8b 7f       	andi	r24, 0xFB	; 251
 1ae:	8c 93       	st	X, r24

	/************************** UCSRC Description **************************
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	/*URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	SET_BIT(UCSRC,URSEL);
 1b0:	a0 e4       	ldi	r26, 0x40	; 64
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e0 e4       	ldi	r30, 0x40	; 64
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8c 93       	st	X, r24

	/*Number of bits is configurable
	 * UCSZ1:0 = 11 For 8-bit data mode*/

	UCSRC = (UCSRC & 0xF9)| ((Config_Ptr->num_of_data_bits)<<1);
 1be:	a0 e4       	ldi	r26, 0x40	; 64
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e0 e4       	ldi	r30, 0x40	; 64
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	28 2f       	mov	r18, r24
 1ca:	29 7f       	andi	r18, 0xF9	; 249
 1cc:	eb 81       	ldd	r30, Y+3	; 0x03
 1ce:	fc 81       	ldd	r31, Y+4	; 0x04
 1d0:	82 81       	ldd	r24, Z+2	; 0x02
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	82 2b       	or	r24, r18
 1dc:	8c 93       	st	X, r24

	/*UMSEL   = 0 Asynchronous Operation*/
#if ( UART_SYNCHRONOUS_ASYNCHRONOUS_MODE == ASYNCHRONOUS_MODE)

	/*if Clock polarity asynchronous that's mean this bit UMSEL=0*/
	CLEAR_BIT(UCSRC,UMSEL);
 1de:	a0 e4       	ldi	r26, 0x40	; 64
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	e0 e4       	ldi	r30, 0x40	; 64
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 7b       	andi	r24, 0xBF	; 191
 1ea:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UMSEL);

#endif

	/* Parity mode settings UPM1:0  = 00 Disable parity bit */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->Parity_mode)<<4);
 1ec:	a0 e4       	ldi	r26, 0x40	; 64
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	e0 e4       	ldi	r30, 0x40	; 64
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	28 2f       	mov	r18, r24
 1f8:	2f 7c       	andi	r18, 0xCF	; 207
 1fa:	eb 81       	ldd	r30, Y+3	; 0x03
 1fc:	fc 81       	ldd	r31, Y+4	; 0x04
 1fe:	84 81       	ldd	r24, Z+4	; 0x04
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	82 95       	swap	r24
 206:	92 95       	swap	r25
 208:	90 7f       	andi	r25, 0xF0	; 240
 20a:	98 27       	eor	r25, r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	98 27       	eor	r25, r24
 210:	82 2b       	or	r24, r18
 212:	8c 93       	st	X, r24

	/* Stop bits settings */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bits)<<3);
 214:	a0 e4       	ldi	r26, 0x40	; 64
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e0 e4       	ldi	r30, 0x40	; 64
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	28 2f       	mov	r18, r24
 220:	27 7f       	andi	r18, 0xF7	; 247
 222:	eb 81       	ldd	r30, Y+3	; 0x03
 224:	fc 81       	ldd	r31, Y+4	; 0x04
 226:	83 81       	ldd	r24, Z+3	; 0x03
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	82 2b       	or	r24, r18
 23a:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)( (F_CPU / (( Config_Ptr->Baudrate )* 8UL) ) - 1);
 23c:	eb 81       	ldd	r30, Y+3	; 0x03
 23e:	fc 81       	ldd	r31, Y+4	; 0x04
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	cc 01       	movw	r24, r24
 246:	a0 e0       	ldi	r26, 0x00	; 0
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	aa 1f       	adc	r26, r26
 260:	bb 1f       	adc	r27, r27
 262:	9c 01       	movw	r18, r24
 264:	ad 01       	movw	r20, r26
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	94 e2       	ldi	r25, 0x24	; 36
 26a:	a4 ef       	ldi	r26, 0xF4	; 244
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	bc 01       	movw	r22, r24
 270:	cd 01       	movw	r24, r26
 272:	0e 94 de 01 	call	0x3bc	; 0x3bc <__udivmodsi4>
 276:	da 01       	movw	r26, r20
 278:	c9 01       	movw	r24, r18
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
 280:	e0 e4       	ldi	r30, 0x40	; 64
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	89 2f       	mov	r24, r25
 28a:	99 27       	eor	r25, r25
 28c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 28e:	e9 e2       	ldi	r30, 0x29	; 41
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	80 83       	st	Z, r24

}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	cf 91       	pop	r28
 2a0:	df 91       	pop	r29
 2a2:	08 95       	ret

000002a4 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	89 83       	std	Y+1, r24	; 0x01
	/* Polling based*/
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 2b0:	eb e2       	ldi	r30, 0x2B	; 43
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	88 2f       	mov	r24, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	80 72       	andi	r24, 0x20	; 32
 2bc:	90 70       	andi	r25, 0x00	; 0
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	b9 f3       	breq	.-18     	; 0x2b0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
 2c2:	ec e2       	ldi	r30, 0x2C	; 44
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	80 83       	st	Z, r24
		UDR = data;
		while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
		SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/

}
 2ca:	0f 90       	pop	r0
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	08 95       	ret

000002d2 <UART_recieveByte>:
 * Functional responsible for receive byte from another UART device.
 */


#if (UART_RECEIVE_IMPLEMENTATION_BASED == UART_INTERRUPT_BASED)
uint8 UART_recieveByte(void){
 2d2:	df 93       	push	r29
 2d4:	cf 93       	push	r28
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62

	return g_UART_result;
 2da:	80 91 66 00 	lds	r24, 0x0066
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */

}
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	08 95       	ret

000002e4 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
 2e4:	df 93       	push	r29
 2e6:	cf 93       	push	r28
 2e8:	00 d0       	rcall	.+0      	; 0x2ea <UART_sendString+0x6>
 2ea:	0f 92       	push	r0
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	9b 83       	std	Y+3, r25	; 0x03
 2f2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
 2f4:	19 82       	std	Y+1, r1	; 0x01
 2f6:	0e c0       	rjmp	.+28     	; 0x314 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	9b 81       	ldd	r25, Y+3	; 0x03
 302:	fc 01       	movw	r30, r24
 304:	e2 0f       	add	r30, r18
 306:	f3 1f       	adc	r31, r19
 308:	80 81       	ld	r24, Z
 30a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <UART_sendByte>
		i++;
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str){

	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	28 2f       	mov	r18, r24
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	9b 81       	ldd	r25, Y+3	; 0x03
 31e:	fc 01       	movw	r30, r24
 320:	e2 0f       	add	r30, r18
 322:	f3 1f       	adc	r31, r19
 324:	80 81       	ld	r24, Z
 326:	88 23       	and	r24, r24
 328:	39 f7       	brne	.-50     	; 0x2f8 <UART_sendString+0x14>
		{
			UART_sendByte(*Str);
			Str++;
		}
	 *******************************************************************/
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	cf 91       	pop	r28
 332:	df 91       	pop	r29
 334:	08 95       	ret

00000336 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */

void UART_receiveString(uint8 *Str){
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	df 93       	push	r29
 33c:	cf 93       	push	r28
 33e:	00 d0       	rcall	.+0      	; 0x340 <UART_receiveString+0xa>
 340:	0f 92       	push	r0
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	9b 83       	std	Y+3, r25	; 0x03
 348:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
 34a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	9b 81       	ldd	r25, Y+3	; 0x03
 356:	8c 01       	movw	r16, r24
 358:	02 0f       	add	r16, r18
 35a:	13 1f       	adc	r17, r19
 35c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_recieveByte>
 360:	f8 01       	movw	r30, r16
 362:	80 83       	st	Z, r24
 364:	0f c0       	rjmp	.+30     	; 0x384 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	8f 5f       	subi	r24, 0xFF	; 255
 36a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	9b 81       	ldd	r25, Y+3	; 0x03
 376:	8c 01       	movw	r16, r24
 378:	02 0f       	add	r16, r18
 37a:	13 1f       	adc	r17, r19
 37c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_recieveByte>
 380:	f8 01       	movw	r30, r16
 382:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	9b 81       	ldd	r25, Y+3	; 0x03
 38e:	fc 01       	movw	r30, r24
 390:	e2 0f       	add	r30, r18
 392:	f3 1f       	adc	r31, r19
 394:	80 81       	ld	r24, Z
 396:	83 32       	cpi	r24, 0x23	; 35
 398:	31 f7       	brne	.-52     	; 0x366 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	9b 81       	ldd	r25, Y+3	; 0x03
 3a4:	fc 01       	movw	r30, r24
 3a6:	e2 0f       	add	r30, r18
 3a8:	f3 1f       	adc	r31, r19
 3aa:	10 82       	st	Z, r1

}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	08 95       	ret

000003bc <__udivmodsi4>:
 3bc:	a1 e2       	ldi	r26, 0x21	; 33
 3be:	1a 2e       	mov	r1, r26
 3c0:	aa 1b       	sub	r26, r26
 3c2:	bb 1b       	sub	r27, r27
 3c4:	fd 01       	movw	r30, r26
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <__udivmodsi4_ep>

000003c8 <__udivmodsi4_loop>:
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	ee 1f       	adc	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	a2 17       	cp	r26, r18
 3d2:	b3 07       	cpc	r27, r19
 3d4:	e4 07       	cpc	r30, r20
 3d6:	f5 07       	cpc	r31, r21
 3d8:	20 f0       	brcs	.+8      	; 0x3e2 <__udivmodsi4_ep>
 3da:	a2 1b       	sub	r26, r18
 3dc:	b3 0b       	sbc	r27, r19
 3de:	e4 0b       	sbc	r30, r20
 3e0:	f5 0b       	sbc	r31, r21

000003e2 <__udivmodsi4_ep>:
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	1a 94       	dec	r1
 3ec:	69 f7       	brne	.-38     	; 0x3c8 <__udivmodsi4_loop>
 3ee:	60 95       	com	r22
 3f0:	70 95       	com	r23
 3f2:	80 95       	com	r24
 3f4:	90 95       	com	r25
 3f6:	9b 01       	movw	r18, r22
 3f8:	ac 01       	movw	r20, r24
 3fa:	bd 01       	movw	r22, r26
 3fc:	cf 01       	movw	r24, r30
 3fe:	08 95       	ret

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
